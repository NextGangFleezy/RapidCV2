#!/usr/bin/env node
import { execSync } from 'child_process';
import { existsSync, readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('üöÄ RapidCV Deployment Verification');
console.log('================================');

// Check essential files
const essentialFiles = [
  'vercel.json',
  'api/index.ts',
  '.vercelignore',
  'package.json',
  'server/routes.ts',
  'server/storage.ts',
  'server/services/openai.ts',
  'client/src/App.tsx'
];

console.log('\nüìÅ Checking essential files...');
let filesOk = true;
essentialFiles.forEach(file => {
  if (existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MISSING`);
    filesOk = false;
  }
});

// Check vercel.json configuration
console.log('\n‚öôÔ∏è Vercel configuration check...');
try {
  const vercelConfig = JSON.parse(readFileSync('vercel.json', 'utf8'));
  console.log('‚úÖ vercel.json parsed successfully');
  console.log(`‚úÖ Build source: ${vercelConfig.builds[0].src}`);
  console.log(`‚úÖ Routes configured: ${vercelConfig.routes.length}`);
  console.log(`‚úÖ Max duration: ${vercelConfig.functions['api/index.ts'].maxDuration}s`);
} catch (error) {
  console.log('‚ùå vercel.json configuration error:', error.message);
  filesOk = false;
}

// Check package.json
console.log('\nüì¶ Package.json check...');
try {
  const pkg = JSON.parse(readFileSync('package.json', 'utf8'));
  console.log('‚úÖ package.json parsed successfully');
  console.log(`‚úÖ Build script: ${pkg.scripts.build}`);
  console.log(`‚úÖ Dev script: ${pkg.scripts.dev}`);
  
  // Check key dependencies
  const keyDeps = ['@anthropic-ai/sdk', 'express', 'react', 'vite', 'puppeteer'];
  keyDeps.forEach(dep => {
    if (pkg.dependencies[dep] || pkg.devDependencies[dep]) {
      console.log(`‚úÖ ${dep} dependency found`);
    } else {
      console.log(`‚ùå ${dep} dependency missing`);
    }
  });
} catch (error) {
  console.log('‚ùå package.json error:', error.message);
  filesOk = false;
}

// Check API entry point
console.log('\nüîß API entry point check...');
try {
  const apiContent = readFileSync('api/index.ts', 'utf8');
  if (apiContent.includes('export default app')) {
    console.log('‚úÖ API entry point exports app correctly');
  } else {
    console.log('‚ùå API entry point missing default export');
    filesOk = false;
  }
  
  if (apiContent.includes('express.json({ limit: \'50mb\' })')) {
    console.log('‚úÖ File upload limits configured');
  } else {
    console.log('‚ùå File upload limits not configured');
  }
} catch (error) {
  console.log('‚ùå API entry point error:', error.message);
  filesOk = false;
}

// Environment variables check
console.log('\nüîë Environment variables check...');
const requiredEnvs = ['ANTHROPIC_API_KEY'];
requiredEnvs.forEach(envVar => {
  if (process.env[envVar]) {
    console.log(`‚úÖ ${envVar} is set`);
  } else {
    console.log(`‚ö†Ô∏è ${envVar} not set (required for deployment)`);
  }
});

// Final summary
console.log('\nüìä Deployment Readiness Summary');
console.log('==============================');
if (filesOk) {
  console.log('‚úÖ All essential files present and configured');
  console.log('‚úÖ Vercel configuration valid');
  console.log('‚úÖ Serverless function entry point ready');
  console.log('‚úÖ Dependencies configured');
  console.log('');
  console.log('üéâ APPLICATION IS DEPLOYMENT READY!');
  console.log('');
  console.log('Next steps:');
  console.log('1. Push to GitHub repository');
  console.log('2. Connect to Vercel');
  console.log('3. Set ANTHROPIC_API_KEY in Vercel dashboard');
  console.log('4. Deploy!');
} else {
  console.log('‚ùå Deployment not ready - fix issues above');
  process.exit(1);
}